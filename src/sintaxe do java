O abstract é uma palavra-chave em Java usada para definir classes e métodos que não são completos por si mesmos e precisam ser implementados por subclasses. Aqui estão os principais pontos sobre o uso do abstract:

1. Classes Abstratas
Definição: Uma classe abstrata é uma classe que não pode ser instanciada diretamente. Em vez disso, deve ser estendida por outras classes.
Uso: Utiliza-se uma classe abstrata quando se quer definir um comportamento base comum para um grupo de subclasses, mas não se quer permitir a criação de instâncias dessa classe base.
Sintaxe:
java
Copiar código
abstract class Animal {
    abstract void fazerSom();

    void respirar() {
        System.out.println("Animal está respirando");
    }
}
2. Métodos Abstratos
Definição: Um método abstrato é um método que não possui implementação na classe abstrata. Subclasses concretas são obrigadas a fornecer uma implementação para esse método.
Uso: Métodos abstratos são usados quando você quer forçar as subclasses a implementar certos métodos específicos, garantindo que cada subclasse tenha uma versão desse método.
Sintaxe:
java
Copiar código
abstract class Animal {
    abstract void fazerSom();
}

class Cachorro extends Animal {
    @Override
    void fazerSom() {
        System.out.println("O cachorro late");
    }
}
3. Restrições e Regras
Não pode ser instanciada: Uma classe abstrata não pode ser usada para criar objetos diretamente.
Subclasses concretas: Toda classe concreta (não abstrata) que estende uma classe abstrata deve implementar todos os métodos abstratos da classe base.
Pode ter métodos concretos: Uma classe abstrata pode ter métodos com implementação, além de métodos abstratos.
Pode ter construtores: Mesmo que não possa ser instanciada diretamente, uma classe abstrata pode ter construtores que são chamados quando uma instância de uma subclasse é criada.
4. Exemplos de Aplicação
Design de Sistema: Classes abstratas são frequentemente usadas em sistemas para definir um contrato de métodos e comportamento, que é compartilhado entre várias classes que representam diferentes implementações.
Polimorfismo: Usar classes abstratas ajuda a aproveitar o polimorfismo, permitindo que o código opere em uma interface comum, sem precisar saber a implementação específica de cada classe.


 palavra-chave static em Java é usada para definir membros de uma classe que pertencem à própria classe, e não a uma instância específica da classe. Isso afeta variáveis, métodos e blocos de inicialização. Aqui está uma visão geral de como e quando usar static:

1. Variáveis Estáticas (Campos Estáticos)
Definição: Variáveis estáticas são compartilhadas por todas as instâncias de uma classe. Elas são associadas à classe em vez de a qualquer objeto específico.
Uso: Utilize variáveis estáticas quando você precisa de uma variável que seja comum a todas as instâncias de uma classe, como constantes ou contadores de instâncias.
Exemplo:
java
Copiar código
class Contador {
    private static int totalInstancias = 0;

    public Contador() {
        totalInstancias++;
    }

    public static int getTotalInstancias() {
        return totalInstancias;
    }
}

public class Main {
    public static void main(String[] args) {
        new Contador();
        new Contador();
        System.out.println("Total de instâncias: " + Contador.getTotalInstancias());
    }
}
Neste exemplo, totalInstancias é uma variável estática que conta o número de instâncias da classe Contador.
2. Métodos Estáticos
Definição: Métodos estáticos pertencem à classe e podem ser chamados sem a necessidade de criar uma instância da classe. Eles não podem acessar diretamente variáveis de instância ou métodos de instância.
Uso: Métodos estáticos são usados para operações que não dependem do estado de uma instância específica da classe. Por exemplo, funções utilitárias, cálculos matemáticos, etc.
Exemplo:
java
Copiar código
class Calculadora {
    public static int somar(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        int resultado = Calculadora.somar(5, 3);
        System.out.println("Resultado da soma: " + resultado);
    }
}
3. Blocos de Inicialização Estáticos
Definição: Blocos estáticos são usados para inicializar variáveis estáticas. Eles são executados uma vez, quando a classe é carregada.
Uso: Utilize blocos estáticos quando precisar realizar inicialização complexa para variáveis estáticas.
Exemplo:
java
Copiar código
class Configuracao {
    private static final String URL;

    static {
        URL = "http://www.exemplo.com";
        // Outras inicializações necessárias
    }

    public static String getUrl() {
        return URL;
    }
}

public class Main {
    public static void main(String[] args) {
        System.out.println("URL de configuração: " + Configuracao.getUrl());
    }
}
4. Classes Internas Estáticas
Definição: Uma classe interna estática é uma classe definida dentro de outra classe e é marcada como static. Ela não tem acesso direto aos membros de instância da classe externa.
Uso: Use uma classe interna estática quando precisar de uma classe auxiliar que não dependa de uma instância da classe externa.
Exemplo:
java
Copiar código
class Externa {
    private static String mensagem = "Olá";

    static class Interna {
        void imprimirMensagem() {
            System.out.println(mensagem);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Externa.Interna interna = new Externa.Interna();
        interna.imprimirMensagem();
    }
}
Considerações Importantes:
Acesso: Métodos e variáveis estáticas podem ser acessados diretamente pela classe (Classe.nomeDoMembro) sem criar uma instância.
Uso Excessivo: Evite o uso excessivo de membros estáticos, pois isso pode levar a problemas com testes e manutenção do código. Prefira usá-los quando realmente fizer sentido para a arquitetura do seu software.
Polimorfismo e Herança: Métodos estáticos não podem ser sobrecarregados de maneira polimórfica como métodos de instância, e eles não são sujeitos ao conceito de sobrescrita.


Em Java, um Supplier<T> é uma interface funcional da API java.util.function que representa um fornecedor de resultados. Ele não recebe nenhum argumento, mas retorna um valor do tipo especificado T. É frequentemente usado em situações onde você precisa fornecer ou gerar um valor sob demanda, sem a necessidade de parâmetros de entrada.

Características do Supplier:
Interface Funcional: Um Supplier é uma interface funcional, o que significa que pode ser implementada usando lambdas ou referências de métodos.
Método funcional: O único método abstrato que deve ser implementado é o método get(), que retorna um valor do tipo T:
java
Copiar código
T get();
Exemplo Simples de Supplier:
Imagine que você tem um Supplier que fornece a data e hora atuais:

java
Copiar código
import java.time.LocalDateTime;
import java.util.function.Supplier;

public class Main {
    public static void main(String[] args) {
        Supplier<LocalDateTime> fornecerDataHora = () -> LocalDateTime.now();

        // Obtendo o resultado
        System.out.println("Data e Hora atuais: " + fornecerDataHora.get());
    }
}
Neste exemplo:

O Supplier<LocalDateTime> fornece a data e hora atual.
O método get() é chamado para obter o valor atual da data e hora.
Lambdas e Supplier
Uma das principais utilizações de Supplier é através de expressões lambda. O formato () -> é uma maneira concisa de declarar uma função que não recebe argumentos e retorna um valor.

Exemplo com lambda:

java
Copiar código
Supplier<String> saudacao = () -> "Olá, mundo!";
System.out.println(saudacao.get());  // Imprime: Olá, mundo!
Aqui, a expressão lambda () -> "Olá, mundo!" é usada para implementar o método get() de Supplier<String>.

Quando Usar Supplier?
Você pode usar Supplier em várias situações, como:

Lazily Loading (carregamento tardio): Quando você quer adiar a criação de um objeto até que ele seja realmente necessário.
Geração de valores dinâmicos: Quando um valor precisa ser gerado de forma dinâmica, como uma sequência de números aleatórios ou uma data atual.
Métodos de Alta Ordem: Muitas APIs que recebem funções como parâmetros (por exemplo, Stream API) usam Supplier para fornecer valores quando necessário.
Exemplo: Uso em um Stream
Aqui está um exemplo de uso de Supplier com a classe Stream para gerar números aleatórios:

java
Copiar código
import java.util.Random;
import java.util.function.Supplier;
import java.util.stream.Stream;

public class Main {
    public static void main(String[] args) {
        Supplier<Integer> randomSupplier = () -> new Random().nextInt(100);

        Stream.generate(randomSupplier)
              .limit(5)
              .forEach(System.out::println); // Imprime 5 números aleatórios
    }
}